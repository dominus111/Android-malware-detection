from androguard import misc
import os
import numpy as np
import pandas as pd

class PreProcess():

    def __init__(self):
        self.dataSet = {"permissions":[]}
        self.permList = list()
        self.apkAllNames = list()
        self.setMalware = {"permissions":[]}
        #self.permListM = list()
        self.malwareNames = list()
        self.getPeremissionsBenign()
        self.getPeremissionsMalware()
        self.createPandasDataframe()
        #self.createPandasDataframeM()
        self.numBenign = 0
        self.numMalware = 0
        self.totalNumber = 0

# GOES THROUGH ALL THE APKS IN THE BENING FOLDER AND EXTRACTS THE PERMISSIONS
    def getPeremissionsBenign(self):
        print("Begin");
        permCollection = set()
        num = 0      
        for root, dirs, files in os.walk("Benign/"):
            for filename in files:
                try:
                    a, d, dx = misc.AnalyzeAPK("Benign/" + filename)
                    list1 = list()
                    list1.append(a.get_permissions())
                    print(num)
                    self.apkAllNames.append(filename)

                    if list1[0]:

                        permissions = list()
                        for pr in list1[0]:
                            if pr not in self.permList:
                                self.permList.append(pr)
                                permissions.append(self.permList.index(pr))
                            else:
                                permissions.append(self.permList.index(pr))

                        self.dataSet["permissions"].append(permissions)
                    else:
                        self.dataSet["permissions"].append(list())
                    num = num +1
                except Exception as  e:
                    print("Error during analysis of above APK - IGNORED")
                    print(filename)
                    #print e.message
                    continue
            #print("loop")
        self.numBenign = num

# GOES THROUGH ALL THE APKS IN THE MALWARE FOLDER AND EXTRACTS THE PERMISSIONS
    def getPeremissionsMalware(self):
        permCollection = set()
        num = 0

        for root, dirs, files in os.walk("Malware/"):
            for filename in files:
                try: 
                    a, d, dx = misc.AnalyzeAPK("Malware/" + filename)
                    list1 = list()
                    list1.append(a.get_permissions())
                    print(num)
                    self.apkAllNames.append(filename)

                    if list1[0]:

                        permissions = list()
                        for pr in list1[0]:
                            if pr not in self.permList:
                                self.permList.append(pr)
                                permissions.append(self.permList.index(pr))
                            else:
                                permissions.append(self.permList.index(pr))

                        self.dataSet["permissions"].append(permissions)
                    else:
                        self.dataSet["permissions"].append(list())
                    num = num +1
                except Exception as  e:
                    print("Error during analysis of above APK - IGNORED")
                    print(filename)
                    #print e.message
                    continue
            #print("loop")
        self.numMalware = num

# COMBINES ALL THE PERMISSIONS THAT WERE EXTRACTED AND CREATES A PANDAS DATAFRAME
# CREATES A FILE DATA.CSV FROM THE PANDAS DATAFRAME
    def createPandasDataframe(self):
        
        try:
            self.totalNumber = self.numBenign + self.numMalware

            indx = np.array(range(1, (self.totalNumber +1)))
            print(indx)
            self.pandasBenign = pd.DataFrame(index = indx)

            print(self.apkAllNames)
            apkNames = pd.Series(self.apkAllNames, name="NAME", index = indx)
            self.pandasBenign[apkNames.name] = apkNames


            matrix = self.createMatrix(self.dataSet["permissions"], len(self.permList))
            frame = pd.DataFrame(matrix, columns=self.permList, index=indx)
            self.pandasBenign = self.pandasBenign.join(frame)

            vecZeros = np.zeros(self.numBenign, dtype='int')
            vecOnes = np.ones(self.numMalware, dtype='int')
            vecClass =np.concatenate((vecZeros, vecOnes), axis=0)
            #print(vecOnes)
            classSeparator = pd.Series(vecClass, name="CLASS", index = indx)
            self.pandasBenign[classSeparator.name] = classSeparator

            self.pandasBenign.to_csv("data.csv", index=False)

        except Exception as e:
            print("Error while creating benign dataframe")
            print(e.args)
            #print(e.message)
            exit(0)
        
    
    def createMatrix(self, array2D, length):
        matrix = list()
        for v in array2D:
            if v:
                matrix.append(self.createVector(v, length))
            else:
                matrix.append(np.zeros(length, dtype='int'))
        return matrix

    def createVector(self, vector, length):
        vec = np.zeros(length, dtype='int')
        vec[vector] = 1
        return vec